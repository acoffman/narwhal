#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.dirname(__FILE__) + '/daemon_types'

module AuditDaemon
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      return recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
    end

    def notify(msg)
      send_notify(msg)
    end

    def send_notify(msg)
      send_message('notify', Notify_args, :msg => msg)
    end
  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      result.success = @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_notify(seqid, iprot, oprot)
      args = read_args(iprot, Notify_args)
      @handler.notify(args.msg)
      return
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Ping_result
    include ::Thrift::Struct
    SUCCESS = 0

    ::Thrift::Struct.field_accessor self, :success
    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Notify_args
    include ::Thrift::Struct
    MSG = 1

    ::Thrift::Struct.field_accessor self, :msg
    FIELDS = {
      MSG => {:type => ::Thrift::Types::STRUCT, :name => 'msg', :class => Message}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Notify_result
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

end

